readRawCBCsFromDB <- function(raw_data = tar_read(raw_data)){
  
  # Connect to DB file
  con <- DBI::dbConnect(RSQLite::SQLite(), raw_data)
  
  # Read the data from the DB
  data <- DBI::dbGetQuery(con, 
                          "SELECT EPIC_MRN, DRAWN_DT_TM, PERFORM_RESULT_UPDT_DT_TM, TASK_ASSAY, RESULT_VALUE_NUMERIC 
                          FROM results
                          WHERE TASK_ASSAY IN ('Hgb', 'Hct', 'WBC', 'Plt')")
  
  # Close the connection
  DBI::dbDisconnect(con)
  
  # Apply anonymizing time-shift
  shifts <- data |> distinct(EPIC_MRN) |> mutate(shift = 0) #rnorm(n(), mean = 7*24*60*60, sd = 3*24*60*60))
  
  data_shifted <- 
    left_join(data, shifts) |> 
      mutate(DRAWN_DT_TM = as_datetime(as.numeric(as_datetime(DRAWN_DT_TM)) + shift), 
           PERFORM_RESULT_UPDT_DT_TM = as_datetime(as.numeric(as_datetime(PERFORM_RESULT_UPDT_DT_TM)) + shift)) |> 
      select(-shift)
  
  # Return shifted data
  data_shifted |> distinct()
  
}

extractTestSetMetadata <- function(raw_data = tar_read(raw_data), test_set = tar_read(test_set)){
  
  # Connect to DB file
  con <- DBI::dbConnect(RSQLite::SQLite(), raw_data)
  
  # Read the data from the DB
  data <- 
    DBI::dbGetQuery(con, "SELECT EPIC_MRN, DRAWN_DT_TM, DRAW_FACILITY, DRAW_NURSING, DRAW_MED_SERVICE, ENCOUNTER_TYPE_CLASS, ADMIT_TYPE, PERFORM_RESULT_STATUS, ORIG_ORDER_DT_TM, DRAWN_DT_TM, PERFORM_RESULT_UPDT_DT_TM, ORDER_COMPLETE_DT_TM, RESULT_COMMENT 
                          FROM results WHERE 
                          TASK_ASSAY = 'Hgb'") |>  
      distinct() |> 
      mutate(DRAWN_DT_TM = as_datetime(DRAWN_DT_TM)) |> 
      filter(DRAWN_DT_TM >= "2024-01-01")
  
  # Close the connection
  DBI::dbDisconnect(con)
  
  # Return  metadata
  data |> distinct()
  
}

pivotCBCData <- function(data_long = tar_read(data_long)){
  
  data_long |> 
    arrange(PERFORM_RESULT_UPDT_DT_TM) |> 
    pivot_wider(id_cols = c("EPIC_MRN", "DRAWN_DT_TM"), names_from = "TASK_ASSAY", values_from = "RESULT_VALUE_NUMERIC", 
                values_fn = last,
                values_fill = NA) |> 
    distinct()
  
}

calculatePrePost <- function(data_wide = tar_read(data_wide)){
  
  data_wide |> 
    group_by(EPIC_MRN) |> 
    arrange(DRAWN_DT_TM) |> 
    mutate(
      hours_since_prior = as.numeric(DRAWN_DT_TM - lag(DRAWN_DT_TM), units = "hours"),
      hours_to_post = as.numeric(lead(DRAWN_DT_TM) - DRAWN_DT_TM, units = "hours"),
      across(c("Hgb", "Hct", "WBC", "Plt"), ~lag(.), .names = "{.col}_prior"),
      across(c("Hgb", "Hct", "WBC", "Plt"), ~lead(.), .names = "{.col}_post")) |> 
    ungroup()
  
}

calculateDeltas <- function(data_pre_post = tar_read(data_pre_post)){
  
  data_pre_post |> 
    mutate(
      across(c("Hgb", "Hct", "WBC", "Plt"), ~ . - get(paste0(cur_column(), "_prior")), .names = "{.col}_delta_prior"),
      across(ends_with("delta_prior"), ~ . / hours_since_prior, .names = "{.col}_per_hour"),
      across(c("Hgb", "Hct", "WBC", "Plt"), ~ get(paste0(cur_column(), "_delta_prior")) / get(paste0(cur_column(), "_prior")) , .names = "{.col}_delta_prop_prior"),
      across(ends_with("delta_prop_prior"), ~ . / hours_since_prior, .names = "{.col}_per_hour"),
      across(c("Hgb", "Hct", "WBC", "Plt"), ~ get(paste0(cur_column(), "_post")) - ., .names = "{.col}_delta_post"),
      across(ends_with("delta_post"), ~ . / hours_to_post, .names = "{.col}_per_hour"),
      across(c("Hgb", "Hct", "WBC", "Plt"), ~ get(paste0(cur_column(), "_delta_post")) / ., .names = "{.col}_delta_prop_post"),
      across(ends_with("delta_prop_post"), ~ . / hours_to_post, .names = "{.col}_per_hour"), 
      across(c("Hgb", "Hct", "WBC", "Plt"), ~ log2( (. + 0.01) / (get(paste0(cur_column(), "_prior")) + 0.01) ), .names = "{.col}_fold_change_prior"),
      across(c("Hgb", "Hct", "WBC", "Plt"), ~ log2( (get(paste0(cur_column(), "_post")) + 0.01) / (. + 0.01) ), .names = "{.col}_fold_change_post"),
      across(c("Hgb", "Hct", "WBC", "Plt"), ~ abs(get(paste0(cur_column(), "_delta_prior"))) + abs(get(paste0(cur_column(), "_delta_post"))), .names = "{.col}_distance"),
      across(c("Hgb", "Hct", "WBC", "Plt"), ~ abs(get(paste0(cur_column(), "_prior")) - get(paste0(cur_column(), "_post"))), .names = "{.col}_change")
      )
  
}

applyRulesBasedContaminationFlags <- function(data_with_recent_pre_post = tar_read(data_with_recent_pre_post)){
  
  contam_flags <- 
    (
    data_with_recent_pre_post$Hgb_delta_prop_prior <= -0.1 &
    data_with_recent_pre_post$Hct_delta_prop_prior <= -0.1 &
    data_with_recent_pre_post$Plt_delta_prop_prior <= -0.1
    ) &
    (
    data_with_recent_pre_post$Hgb_delta_prop_post >= 0.1 &
    data_with_recent_pre_post$Hct_delta_prop_post >= 0.1 &
    data_with_recent_pre_post$Plt_delta_prop_post >= 0.1 
    )
  
  data_with_recent_pre_post$rules_based_contam_flag = contam_flags
  
  data_with_recent_pre_post
  
}

addTestMetadata <- function(){
  

  
}